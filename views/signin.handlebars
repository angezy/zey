<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
      <link rel="apple-touch-icon" sizes="76x76" href="../assets/img/apple-icon.png">
  <link rel="icon" type="image/png" href="../assets/img/favicon.png">
  <meta name="author" content="Nick">
  <title>{{title}}</title>
  <!-- Font Awesome -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
  <!-- MDB -->
  <link rel="stylesheet" href="/public/css/mdb.min.css" />
  <link rel="stylesheet" href="/assets/css/sc.css">

  <!-- Bootstrap CSS -->
  <!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
     -->
  <style>
    .hidden-section {
      display: none;
    }
  </style>
</head>

<body>
  <div class="container py-5">
    <div id="night-sky" style="--number-of-stars: 70"></div>

    <div class="row d-flex align-items-center justify-content-center">
      <div class="col-md-6">
        <div class=" border  shadow-0 mb-3 glass-card" style="width: 100%;">
          <div class="card-body rounded-4 text-light px-5 pt-4 pb-2">
            <form id="signin-form" class="text-center" novalidate>
              <!-- Section 1: Basic Information -->
              <div class="form-section">
                <h4 class="text-secondary">Login</h4>
                <br><br>
                <div class="row mb-4">
                  <div class="col">
                    <div data-mdb-input-init class="form-outline">
                      <input name="Email" type="Email" id="Email" class=" text-secondary form-control" required />
                      <label class="form-label" for="Email">Email Address</label>
                    </div>
                  </div>
                </div>
                <div class="row mb-4">
                  <div class="col">
                    <div data-mdb-input-init class="form-outline">
                        <i class="far fa-eye trailing fa-fw pe-auto" id="show-password-toggle-icon"></i>
                      <input name="Password" type="Password" id="Password" class=" text-secondary form-control"
                        required />
                      <label class="form-label" for="Password">Password</label>
                    </div>
                  </div>
                </div>

                <!-- 2 column grid layout for inline styling -->
                <div class="row mb-4">
                  <div class="col d-flex justify-content-center">
                    <!-- Checkbox -->
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" value="" id="rememberMe" />
                      <label class="form-check-label" for="rememberMe"> Remember me </label>
                    </div>
                  </div>

                  <div class="text-center bg-transparent">
                    <button type="submit" class="btn btn-lg btn-primary sc"><span class="fb"></span>Sign in</button>
                  </div>
                </div>

            </form>




          </div>

        </div>
      </div>
    </div>

  </div>



  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js">
  </script>
  <!-- MDB -->
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdb-ui-kit/8.1.0/mdb.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="/assets/js/cs.js"></script>
  <!--   Core JS Files   -->
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
  <script>
    const passwordInput1 = document.getElementById('Password');
const toggleIcon = document.getElementById('show-password-toggle-icon');

toggleIcon.addEventListener('pointerdown', (e) => {
  e.preventDefault();

    // Toggle input type between password and text
    if (passwordInput1.type === 'password') {
      passwordInput1.type = 'text';
      toggleIcon.classList.remove('fa-eye');
      toggleIcon.classList.add('fa-eye-slash');
    } else {
      passwordInput1.type = 'password';
      toggleIcon.classList.remove('fa-eye-slash');
      toggleIcon.classList.add('fa-eye');
    }
  });
  </script>
  <script>
    $(document).ready(function () {
      $('#signin-form').on('submit', function (e) {
        e.preventDefault(); // Prevent the default form submission
        block();
        son();
        // Get form values
        const Email = $('#Email').val().trim();
        const Password = $('#Password').val();
        const rememberMe = $('#rememberMe').is(':checked');

        // Client-side input validation
        if (!Email || !Password) {
          Swal.fire({
            icon: 'warning',
            title: 'Input Error',
            text: 'Please fill in both Email and Password fields.',
          });
          bon();
          soff();
          return;
        }
        // Send AJAX request
        $.ajax({
          url: '/auth/signin',
          type: 'POST',
          contentType: 'application/json',
          data: JSON.stringify({
            Email: Email,
            Password: Password,
            rememberMe: rememberMe
          }),
          success: function (response) {
            bon();
            soff();
            window.location.href = '/dashboard';
          },
          error: function (xhr) {
            bon();
            soff();
            console.error('XHR Error:', xhr); // Log the entire XHR object for debugging

            let errorMessage = 'An unexpected error occurred'; // Default fallback

            if (xhr.responseJSON) {
              errorMessage = xhr.responseJSON.message; // Use the JSON response if available
            } else if (xhr.responseText) {
              try {
                const parsed = JSON.parse(xhr.responseText); // Attempt to parse the text
                errorMessage = parsed.message || errorMessage;
              } catch (e) {
                console.error('Failed to parse responseText:', e);
              }
            } else if (xhr.statusText) {
              errorMessage = xhr.statusText; // Use status text as fallback
            }

            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: errorMessage,
            });

          }

        });
      });
    });

  </script>



  <script>
    function block() { $(".sc").prop('disabled', true); }
    function bon() { $(".sc").prop('disabled', false); }
    function son() { $(".fb").addClass("spinner-border spinner-border-sm"); }
    function soff() { $(".fb").removeClass("spinner-border spinner-border-sm"); }
  </script>




</body>


</html>